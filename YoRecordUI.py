# -*- coding: utf-8 -*-
import datetime
import os
import sys
import time

# Form implementation generated from reading ui file 'YoRecord.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtWidgets import QMainWindow, QWidget, QApplication

from Screenshot_record import Screenshot, file_path
from Timer import FloatTimer


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        windowico = file_path('YoRecord.svg')
        # svg_image = QtGui.QImage("YoRecord.svg")
        # # 将 SVG 图像转换为 QPixmap 对象
        # pixmap = QtGui.QPixmap.fromImage(svg_image)
        # 将 QPixmap 对象转换为 QIcon 对象
        # windowico = QtGui.QIcon(pixmap)
        self.setWindowIcon(QIcon(windowico))

        MainWindow.resize(640, 481)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 611, 331))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        # 录制模式，全屏，区域
        self.gB_mod = QtWidgets.QGroupBox(self.horizontalLayoutWidget_2)
        self.gB_mod.setObjectName("groupBox_4")
        # 全屏
        self.rB_mod_full = QtWidgets.QRadioButton(self.gB_mod)
        self.rB_mod_full.setGeometry(QtCore.QRect(20, 30, 61, 19))
        self.rB_mod_full.setObjectName("radioButton")
        # 区域
        self.rB_mod_part = QtWidgets.QRadioButton(self.gB_mod)
        self.rB_mod_part.setGeometry(QtCore.QRect(100, 30, 61, 19))
        self.rB_mod_part.setObjectName("radioButton_2")
        self.verticalLayout_2.addWidget(self.gB_mod)
        # 录制视频格式
        self.gB_type = QtWidgets.QGroupBox(self.horizontalLayoutWidget_2)
        self.gB_type.setObjectName("groupBox_3")
        # MP4
        self.rB_mp4 = QtWidgets.QRadioButton(self.gB_type)
        self.rB_mp4.setGeometry(QtCore.QRect(10, 30, 51, 19))
        self.rB_mp4.setObjectName("radioButton_3")
        # flv
        self.rB_flv = QtWidgets.QRadioButton(self.gB_type)
        self.rB_flv.setGeometry(QtCore.QRect(70, 30, 61, 19))
        self.rB_flv.setObjectName("radioButton_4")
        # avi
        self.rB_avi = QtWidgets.QRadioButton(self.gB_type)
        self.rB_avi.setGeometry(QtCore.QRect(140, 30, 61, 19))
        self.rB_avi.setObjectName("radioButton_5")
        self.verticalLayout_2.addWidget(self.gB_type)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        # 保存位置
        self.gBox_save = QtWidgets.QGroupBox(self.horizontalLayoutWidget_2)
        self.gBox_save.setObjectName("groupBox")
        # 保存位置
        self.lE_save_path = QtWidgets.QLineEdit(self.gBox_save)
        self.lE_save_path.setGeometry(QtCore.QRect(10, 20, 251, 21))
        self.lE_save_path.setObjectName("lineEdit")
        # 选择目录
        self.btn_select_dir = QtWidgets.QPushButton(self.gBox_save)
        self.btn_select_dir.setGeometry(QtCore.QRect(10, 50, 93, 28))
        self.btn_select_dir.setObjectName("pushButton")
        # 打开目录
        self.btn_open_dir = QtWidgets.QPushButton(self.gBox_save)
        self.btn_open_dir.setGeometry(QtCore.QRect(130, 50, 93, 28))
        self.btn_open_dir.setObjectName("pushButton_2")
        # 录制视频文件名
        self.label_file = QtWidgets.QLabel(self.gBox_save)
        self.label_file.setGeometry(QtCore.QRect(10, 100, 61, 21))
        self.label_file.setObjectName("label_2")
        # 文件名
        self.lE_file_name = QtWidgets.QLineEdit(self.gBox_save)
        self.lE_file_name.setGeometry(QtCore.QRect(70, 100, 200, 25))
        self.lE_file_name.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.gBox_save)
        # 运行状态
        self.gBox_status = QtWidgets.QGroupBox(self.horizontalLayoutWidget_2)
        self.gBox_status.setObjectName("groupBox_2")
        self.label_satus = QtWidgets.QLabel(self.gBox_status)
        self.label_satus.setGeometry(QtCore.QRect(40, 30, 131, 61))
        self.label_satus.setObjectName("label_3")
        self.verticalLayout.addWidget(self.gBox_status)

        self.horizontalLayout_2.addLayout(self.verticalLayout)
        # 运行时间
        self.label_run_time = QtWidgets.QLabel(self.centralwidget)
        self.label_run_time.setGeometry(QtCore.QRect(20, 350, 71, 49))
        self.label_run_time.setTextFormat(QtCore.Qt.PlainText)
        self.label_run_time.setObjectName("label")
        # lcd显示区
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(100, 350, 201, 49))
        self.lcdNumber.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lcdNumber.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber.setFrameShadow(QtWidgets.QFrame.Raised)
        self.lcdNumber.setSmallDecimalPoint(False)
        self.lcdNumber.setDigitCount(9)
        self.lcdNumber.setMode(QtWidgets.QLCDNumber.Oct)
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.lcdNumber.setProperty("value", 0.0)
        self.lcdNumber.setObjectName("lcdNumber")
        # 开始/结束 按钮
        self.btn_start_end = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start_end.setGeometry(QtCore.QRect(510, 360, 93, 28))
        self.btn_start_end.setObjectName("pushButton_3")
        # 暂停/恢复 按钮
        self.btn_pause_resum = QtWidgets.QPushButton(self.centralwidget)
        self.btn_pause_resum.setGeometry(QtCore.QRect(370, 360, 93, 28))
        self.btn_pause_resum.setObjectName("pushButton_4")
        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.retranslateUi(MainWindow)
        self.init_data()
        self.init_UIEvent()
        # 浮动计时器
        self._float_timer = FloatTimer()
        # 浮动窗体按钮绑定主窗体函数
        self._float_timer.button.clicked.connect(self.stop_record)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "YoRecord录屏工具"))
        self.gB_mod.setTitle(_translate("MainWindow", "视频录制"))
        self.rB_mod_full.setText(_translate("MainWindow", "全屏"))
        self.rB_mod_part.setText(_translate("MainWindow", "区域"))
        self.gB_type.setTitle(_translate("MainWindow", "格式"))
        self.rB_mp4.setText(_translate("MainWindow", "MP4"))
        self.rB_flv.setText(_translate("MainWindow", "FLV"))
        self.rB_avi.setText(_translate("MainWindow", "AVI"))
        self.gBox_save.setTitle(_translate("MainWindow", "保存位置"))
        self.btn_select_dir.setText(_translate("MainWindow", "更改目录"))
        self.btn_open_dir.setText(_translate("MainWindow", "打开目录"))
        self.label_file.setText(_translate("MainWindow", "文件名："))
        self.gBox_status.setTitle(_translate("MainWindow", "运行状态"))
        self.label_satus.setText(_translate("MainWindow", "停止......"))
        self.label_run_time.setText(_translate("MainWindow", "录制时长："))
        self.btn_start_end.setText(_translate("MainWindow", "开始"))
        self.btn_pause_resum.setText(_translate("MainWindow", "暂停"))

    # 初始化默认数据
    def init_data(self):
        self.rB_mod_full.setChecked(True)
        self.rB_mp4.setChecked(True)
        # self.lineEdit.setText(r"C:\Users\zm\Videos")
        self.lE_save_path.setText(r"D:\test")
        self.lcdNumber.display("00:00:00")
        self.videoPath = self.lE_save_path.text()
        videoName = self.get_video_name()
        self.lE_file_name.setText(videoName)
        # 全限定名
        self.videoFullName = self.videoPath + os.sep + videoName

        font = QFont("Arial", 20)
        self.label_satus.setFont(font)
        self.label_satus.setStyleSheet("color:blue")
        self.label_satus.setStyleSheet("background-color:gold")

    # 初始化界面默认事件
    def init_UIEvent(self):
        self.btn_start_end.clicked.connect(self.start_record)
        # 创建计时器
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_timer)

    # 开始录像
    def start_record(self):
        btn_text = self.btn_start_end.text()
        if btn_text == "开始":
            self._start_time = time.time()#开始时间
            self.timer.start(1000)
            self.btn_start_end.setText("结束")
            self.video = Screenshot()
            self.video.record(self.videoFullName) # todo 修改视频名字
            print("开始录制，文件名：%s 。。。。"%(self.videoFullName) )

            self.show_float_timer(self._start_time)

        else :
            self.stop_record()

    def stop_record(self):
        self.video.terminate()
        # 停止计时器
        self.timer.stop()
        print("结束录制。。。。。")
        # reset
        self.btn_start_end.setText("开始")
        self.reset_video_name()
        self.reset_all()


    def get_video_name(self):
        now = datetime.datetime.now()
        timeStr = now.strftime("%Y-%m-%d_%H%M%S")
        subfix = self.rB_mp4.text()
        # 文件名
        self.videoName = timeStr + "." + subfix
        return self.videoName

    def reset_video_name(self):
        videoName = self.get_video_name()
        self.lE_file_name.setText(videoName)


    # 显示浮动计时窗
    def show_float_timer(self,_start_time):
        self._float_timer.show()

    # 更新时间
    def update_timer(self):
        run_time = time.time()-self._start_time
        run_time_str = self.convert(float(f"{run_time:0>8.2f}"))
        self.lcdNumber.display(run_time_str)
        self._float_timer.timer_label.setText(run_time_str)

    # 将时间表示为小时、分钟、秒的形式# 返回格式化字符串
    def convert(self,raw_time):
        hour = int(raw_time // 3600)
        minute = int((raw_time % 3600) // 60)
        second = int(raw_time % 60)
        fmt = '{:0>2d}:{:0>2d}:{:0>2d}'
        return fmt.format(hour, minute, second)

    # 暂停 todo
    def pauseTimer(self):
        self._pause_flag = True
        self._pause_time = self._current_time
        # 停止发送信号
        self.timer.stop()
        self.setPushButton(btn1=True, btn2=False, btn3=True)

    # 还原
    def reset_all(self):
        self.lcdNumber.display("00:00:00")
        videoName = self.get_video_name()
        self.videoFullName = self.videoPath + os.sep + videoName
        self._float_timer.timer_label.setText("00:00:00")
        self._float_timer.hide()
        print("执行了reset。。。")

    def closeEvent(self, event):
        event.accept()
        QApplication.quit()

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = Ui_MainWindow()
    mw = QMainWindow()
    window.setupUi(mw)
    mw.show()
    app.exec_()